<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arfind</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-20T14:37:54.149Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安全笔记1</title>
    <link href="http://yoursite.com/2020/03/20/%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2020/03/20/安全笔记1/</id>
    <published>2020-03-20T13:37:23.003Z</published>
    <updated>2020-03-20T14:37:54.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="title-安全笔记1"><a href="#title-安全笔记1" class="headerlink" title="title: 安全笔记1"></a>title: 安全笔记1</h1><p>date: 2020-03-20 21:37:22</p><p>photo:跨域访问请求过程.jpg</p><p>tags:<br>安全学习笔记   day  1</p><h2 id="安全五要素"><a href="#安全五要素" class="headerlink" title="安全五要素"></a>安全五要素</h2><p>机密性：数据内容不被泄露</p><p>完整性：保护数据内容完整，不被篡改</p><p>可用性：要求保护资源是”随需而得“</p><p>可审计性</p><p>不可抵赖性</p><h2 id="实施安全评估"><a href="#实施安全评估" class="headerlink" title="实施安全评估"></a>实施安全评估</h2><p>资产等级划分—威胁分析—风险分析—确认解决方案</p><h2 id="资产等级划分"><a href="#资产等级划分" class="headerlink" title="资产等级划分"></a>资产等级划分</h2><p>互联网安全的核心问题，是数据安全的问题</p><p>明确目标</p><p>了解保护目标后，划分信任域与信任边界（一般可从网络逻辑上划分）</p><h2 id="威胁分析"><a href="#威胁分析" class="headerlink" title="威胁分析"></a>威胁分析</h2><p>威胁：可能造成伤害的来源</p><p>风险：可能会出现的损失</p><p>分析方式：头脑风暴（可能确定攻击面）、建立模型</p><p>STRIDE模型：</p><table><thead><tr><th>威胁</th><th>定义</th><th>对应的安全属性</th></tr></thead><tbody><tr><td>Spoofing(伪装)</td><td>冒充他人身份</td><td>认证</td></tr><tr><td>Tampering(篡改)</td><td>修改数据或代码</td><td>完整性</td></tr><tr><td>Repudiation(抵赖)</td><td>否认做过的事情</td><td>不可抵赖性</td></tr><tr><td>Information Disclosure(信息泄露)</td><td>机密信息泄露</td><td>机密性</td></tr><tr><td>Denial of Service(拒绝服务)</td><td>拒绝服务</td><td>可用性</td></tr><tr><td>Elevation of Privilege(提取权限)</td><td>未经授权获得许可</td><td>授权</td></tr></tbody></table><h2 id="风险分析"><a href="#风险分析" class="headerlink" title="风险分析"></a>风险分析</h2><p>风险：衡量一个威胁能带来的伤害，考虑到风险，判断风险高低的过程，就是风险分析</p><p> <a href="风险">^Risk</a> = <a href="可能性">^Probability</a> * <a href="破坏潜力">^Damage Potential</a></p><p><strong>DREAM模型 </strong></p><table><thead><tr><th>等级</th><th>高</th><th>中</th><th>低</th></tr></thead><tbody><tr><td>破坏潜力</td><td>获取完全验证权限；执行管理员操作；非法上传文件</td><td>泄露敏感信息</td><td>泄露其它信息</td></tr><tr><td>再现性</td><td>攻击者可以随意攻击</td><td>攻击者可以重复攻击，但有时间限制</td><td>攻击者很难重复攻击过程</td></tr><tr><td>可利用性</td><td>初学者再短期内鞥掌控攻击方法</td><td>熟练的攻击者才能完成这次攻击</td><td>漏洞利用条件苛刻</td></tr><tr><td>受影响的用户</td><td>所有用户，默认配置，关键用户</td><td>部分用户，非默认配置</td><td>极少数用户，匿名用户</td></tr><tr><td>可暴露性，可发现性</td><td>漏洞很明显，攻击条件很容易获得</td><td>在私有区域，部分人能看到，需要深入挖掘漏洞</td><td>发现该漏洞极其困难</td></tr></tbody></table><h2 id="设计安全方案"><a href="#设计安全方案" class="headerlink" title="设计安全方案"></a>设计安全方案</h2><p><strong>Secure By Default</strong>（黑白名单原则、最小权限原则）</p><p><strong>Defense in Depth</strong>(纵深防御）要在不同层面、不同方面实施安全方案，避免出现纰漏，不同的方案之间要相互配合，构成一个整体；要在正确的地方做正确的事情：在解决根本问题的地方实施针对性的安全方案</p><p>”木桶原理“</p><p><strong>数据与代码分离</strong>：各种注入式攻击引发的问题——从漏洞成因上看问题</p><p>以X S S为例，产生原因为 HTML Injection或JavaScript  Injectio</p><p><img src="/.com//blog\source\_posts\安全笔记1\7Z1{2Q5I`ZEY(E_" alt>SA4LB$H.png)</p><p>其中</p><p><img src="/.com//blog\source\_posts\安全笔记1\002.png" alt></p><p>为代码执行段，而$var是用户能够控制的变量，所以属于用户的数据片段</p><p>若将用户数据片段当成程序片段来执行，则容易发生安全问题</p><p>当$var的值为：</p><p><img src="/.com//blog\source\_posts\安全笔记1\003.png" alt></p><p> 则用户数据被注入到代码中</p><p>解决方案：</p><p><img src="/.com//blog\source\_posts\安全笔记1\004.png" alt></p><p><strong>不可预测性原则</strong>——克服攻击方法的角度看问题</p><p><strong>ASLR</strong>技术：缓冲区溢出时，无法改变Code，但可以使进程的栈基地址随机变化，让攻击这无法准确猜测内存地址，加大攻击难度。在<strong>ASLR</strong>控制下，一个程序每一次启动，其进程的栈基地址都会随机改变，对于攻击者，便是不可预测的。</p><p>不可预测性实现需要应用到加密算法、随机数算法、hash算法</p><h2 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p><strong>同源策略</strong>：一种约定，是浏览器中最核心最基本的安全功能，同源策略和Web和浏览器的关系，就如同区块链技术中区块链技术和比特币的关系一样。web建在同源策略的基础上，浏览器针对同源策略的一种实现。</p><p>浏览器的同源策略，限制了来自不同源的”document”和脚本，对当前document读取或设置某些属性。来自Orign的对象之间无法相互干扰</p><p>判断同源：1.协议 2. post 同源   3. host(域名或 IP 地址，若是IP地址则看作一个根域名）4.子域名</p><p>若是在网站a.com上运行代码：</p><p><strong>例：</strong></p><p><img src="/.com//blog\source\_posts\安全笔记1\005.png" alt></p><p>加载了b.com中的b.js，但是b.js是运行在a.com页面中的，因此对于打开的页面来说，b.js的origin是a.com。</p><p>浏览器中，<script>，<img>,<iframe>,<link>都可以跨域加载资源，而不受同源策略的限制。当这些标签带“src”属性加载时，其实就是对浏览器发起一次GET请求，通过src属性加载资源时，浏览器限制了js的权限，不能读、写返回的内容。</p><p>跨域访问方案的安全基础就是信任js无法控制HTTP头，若是此信任基础被打破，则不再安全。</p><p><img src="D:\blog\source\_posts\安全笔记1\跨域访问请求过程.jpg" alt="跨域访问"></p><p>在浏览器内，DOM、cookie、XMLHttpRequest受同源策略限制，浏览器内的第三方插件也有各自的同源策略。</p><p><strong><em>绕过同源策略</em></strong>,CSS漏洞为例：</p><p><a href="http://www.a.com/test.html" target="_blank" rel="noopener">www.a.com/test.html</a>:</p><p><img src="D:\blog\source\_posts\安全笔记1\006.png" alt=""></p><p><a href="http://www.b.com/test2.html" target="_blank" rel="noopener">www.b.com/test2.html</a>:</p><p><img src="D:\blog\source\_posts\安全笔记1\007.png" alt=""></p><p>通过@import加载了<a href="http://www.a.com/test.html为css文件，渲染进入当前页面DOM，通过document.body.currenStyle.fontFamily访问了这段内容。问题发生在了浏览器的css" target="_blank" rel="noopener">http://www.a.com/test.html为css文件，渲染进入当前页面DOM，通过document.body.currenStyle.fontFamily访问了这段内容。问题发生在了浏览器的css</a> page过程中，浏览器将fontFamily后面的内容当作value，则可以读取到<a href="http://www.a.com/test.html的页面内容。" target="_blank" rel="noopener">http://www.a.com/test.html的页面内容。</a></p></script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;title-安全笔记1&quot;&gt;&lt;a href=&quot;#title-安全笔记1&quot; class=&quot;headerlink&quot; title=&quot;title: 安全笔记1&quot;&gt;&lt;/a&gt;title: 安全笔记1&lt;/h1&gt;&lt;p&gt;date: 2020-03-20 21:37:22&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
</feed>
